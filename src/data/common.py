"""Common code for scripts in src/data/ directory (remaining bits)"""
from pathlib import Path

from src.utils.files import load_json_with_checks
from src.utils.git import GitRepo

# constants
ERROR_ARGS = 1
ERROR_OTHER = 2


def load_repositories_json(repositories_info_path: Path) -> dict:
    """Load <repositories.json> and convert into dict with project name as key

    The returned dict has the following structure:

    {
        '<project_name>': {  # e.g. "sqlalchemy"
            'project': <project_name>,  # e.g. "sqlalchemy"
            'repository_url': <repository_url>,  # e.g. "https://github.com/sqlalchemy/sqlalchemy.git"
            'repository_path': <repository_dir>,  # e.g. "/mnt/data/MSR_Challenge_2024/repositories/sqlalchemy"
        }, ...
    }

    :param Path repositories_info_path:  path to <repositories.json> file
    :return: data extracted from <repositories.json> file
    :rtype: dict
    """
    repo_clone_info = load_json_with_checks(repositories_info_path,
                                            file_descr="<repositories.json>",
                                            data_descr="info about cloned repos",
                                            err_code=ERROR_ARGS, expected_type=list)
    repo_clone_data = {
        repo_info['project']: {
            key: value
            for key, value in repo_info.items()
            if key != 'project'
        }
        for repo_info in repo_clone_info
    }

    return repo_clone_data


def reponame_to_repo_path(repo_clone_data, repo_name):
    """Return path where repository with given name was cloned into, or None

    NOTE: needs to be adjusted if the format of <repositories.json> file
    generated by download_repositories.py script changes.

    :param dict repo_clone_data: information about cloned repositories,
        result of load_repositories_json(Path('data/repositories_download_status.json'))
    :param str repo_name: full name of GitHub repository,
        which in the DevGPT dataset is stored in 'RepoName' field
    :return: path to cloned repository, if exists, otherwise None
    :rtype: Path or None
    """
    project_dir = repo_name.split('/')[-1]

    if project_dir not in repo_clone_data:
        return None

    return Path(repo_clone_data[project_dir]['repository_path'])


class DownloadedRepositories:
    """Helper class, to make it easier to operate on cloned repositories

    With object of this class, instanced with path to <repositories.json> file,
    you can easily create GitRepo objects based on 'RepoName' field from the
    DevGPT dataset.

    Example:
        >>> from src.data.common import DownloadedRepositories
        >>> from pathlib import Path
        >>> all_repos = DownloadedRepositories(Path('data/repositories_download_status.json'))
        >>> the_repo = all_repos.repo('sqlalchemy/sqlalchemy')
        >>> curr_diff = the_repo.unidiff('HEAD^^^^^')
    """
    def __init__(self, repositories_info_path: Path = Path('data/repositories_download_status.json')):
        """Create helper object, by providing it with path to <repositories.json>

        The `repositories_info_path` should point to JSON file with information
        about where one can find repositories cloned by the download_repositories.py
        script (the "clone_repos" stage in dvc.yaml).

        :param Path repositories_info_path: path to <repositories.json> file
        """
        self.repositories_info_path = repositories_info_path
        self.repo_clone_data = load_repositories_json(repositories_info_path)

    def repo(self, repo_name: str) -> GitRepo:
        """Create GitRepo object for cloned 'RepoName' project

        NOTE: currently does not handle gracefully case where project / repository
        could not be cloned for some reason, but is still present in the
        <repositories.json> file.

        :param str repo_name: full name of GitHub repository, present as
            'RepoName' field in DevGPT dataset
        :return: repository obecjt to perform operations on
        :rtype: GitRepo
        """
        return GitRepo(reponame_to_repo_path(self.repo_clone_data, repo_name))
